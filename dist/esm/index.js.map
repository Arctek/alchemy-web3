{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["import Web3 from \"web3\";\r\nimport { AlchemyWeb3Config, FullConfig, Provider, Web3Callback } from \"./types\";\r\nimport { callWhenDone } from \"./util/promises\";\r\nimport { makeAlchemyContext } from \"./web3-adapter/alchemyContext\";\r\n\r\nconst DEFAULT_MAX_RETRIES = 3;\r\nconst DEFAULT_RETRY_INTERVAL = 1000;\r\nconst DEFAULT_RETRY_JITTER = 250;\r\n\r\nexport interface AlchemyWeb3 extends Web3 {\r\n  alchemy: AlchemyMethods;\r\n  setWriteProvider(provider: Provider | null | undefined): void;\r\n}\r\n\r\nexport interface AlchemyMethods {\r\n  getTokenAllowance(\r\n    params: TokenAllowanceParams,\r\n    callback?: Web3Callback<TokenAllowanceResponse>,\r\n  ): Promise<TokenAllowanceResponse>;\r\n  getTokenBalances(\r\n    address: string,\r\n    contractAddresses: string[],\r\n    callback?: Web3Callback<TokenBalancesResponse>,\r\n  ): Promise<TokenBalancesResponse>;\r\n  getTokenMetadata(\r\n    address: string,\r\n    callback?: Web3Callback<TokenMetadataResponse>,\r\n  ): Promise<TokenMetadataResponse>;\r\n}\r\n\r\nexport interface TokenAllowanceParams {\r\n  contract: string;\r\n  owner: string;\r\n  spender: string;\r\n}\r\n\r\nexport type TokenAllowanceResponse = string;\r\n\r\nexport interface TokenBalancesResponse {\r\n  address: string;\r\n  tokenBalances: TokenBalance[];\r\n}\r\n\r\nexport type TokenBalance = TokenBalanceSuccess | TokenBalanceFailure;\r\n\r\nexport interface TokenBalanceSuccess {\r\n  address: string;\r\n  tokenBalance: string;\r\n  error: null;\r\n}\r\n\r\nexport interface TokenBalanceFailure {\r\n  address: string;\r\n  tokenBalance: null;\r\n  error: string;\r\n}\r\n\r\nexport interface TokenMetadataResponse {\r\n  decimals: number | null;\r\n  logo: string | null;\r\n  name: string | null;\r\n  symbol: string | null;\r\n}\r\n\r\ninterface EthereumWindow extends Window {\r\n  ethereum?: any;\r\n}\r\n\r\ndeclare const window: EthereumWindow;\r\n\r\nexport function createAlchemyWeb3(\r\n  alchemyUrl: string,\r\n  config?: AlchemyWeb3Config,\r\n): AlchemyWeb3 {\r\n  const fullConfig = fillInConfigDefaults(config);\r\n  const { provider, setWriteProvider } = makeAlchemyContext(\r\n    alchemyUrl,\r\n    fullConfig,\r\n  );\r\n  const alchemyWeb3 = new Web3(provider) as AlchemyWeb3;\r\n  alchemyWeb3.setProvider = () => {\r\n    throw new Error(\r\n      \"setProvider is not supported in Alchemy Web3. To change the provider used for writes, use setWriteProvider() instead.\",\r\n    );\r\n  };\r\n  alchemyWeb3.setWriteProvider = setWriteProvider;\r\n  const send = alchemyWeb3.currentProvider.send.bind(\r\n    alchemyWeb3.currentProvider,\r\n  );\r\n  alchemyWeb3.alchemy = {\r\n    getTokenAllowance: (params: TokenAllowanceParams, callback) =>\r\n      callAlchemyMethod({\r\n        send,\r\n        callback,\r\n        method: \"alchemy_getTokenAllowance\",\r\n        params: [params],\r\n      }),\r\n    getTokenBalances: (address, contractAddresses, callback) =>\r\n      callAlchemyMethod({\r\n        send,\r\n        callback,\r\n        method: \"alchemy_getTokenBalances\",\r\n        params: [address, contractAddresses],\r\n        processResponse: processTokenBalanceResponse,\r\n      }),\r\n    getTokenMetadata: (address, callback) =>\r\n      callAlchemyMethod({\r\n        send,\r\n        callback,\r\n        params: [address],\r\n        method: \"alchemy_getTokenMetadata\",\r\n      }),\r\n  };\r\n  return alchemyWeb3;\r\n}\r\n\r\nfunction fillInConfigDefaults({\r\n  writeProvider = getWindowProvider(),\r\n  maxRetries = DEFAULT_MAX_RETRIES,\r\n  retryInterval = DEFAULT_RETRY_INTERVAL,\r\n  retryJitter = DEFAULT_RETRY_JITTER,\r\n}: AlchemyWeb3Config = {}): FullConfig {\r\n  return { writeProvider, maxRetries, retryInterval, retryJitter };\r\n}\r\n\r\nfunction getWindowProvider(): Provider | null {\r\n  return typeof window !== \"undefined\" ? window.ethereum : null;\r\n}\r\n\r\ninterface CallAlchemyMethodParams<T> {\r\n  method: string;\r\n  params: any[];\r\n  callback?: Web3Callback<T>;\r\n  send(method: string, params?: any[]): any;\r\n  processResponse?(response: any): T;\r\n}\r\n\r\nfunction callAlchemyMethod<T>({\r\n  method,\r\n  params,\r\n  send,\r\n  callback = noop,\r\n  processResponse = identity,\r\n}: CallAlchemyMethodParams<T>): Promise<T> {\r\n  const promise = (async () => {\r\n    const result = await send(method, params);\r\n    return processResponse(result);\r\n  })();\r\n  callWhenDone(promise, callback);\r\n  return promise;\r\n}\r\n\r\nfunction processTokenBalanceResponse(\r\n  rawResponse: TokenBalancesResponse,\r\n): TokenBalancesResponse {\r\n  // Convert token balance fields from hex-string to decimal-string.\r\n  const fixedTokenBalances = rawResponse.tokenBalances.map(balance =>\r\n    balance.tokenBalance != null\r\n      ? { ...balance, tokenBalance: hexToDecimal(balance.tokenBalance) }\r\n      : balance,\r\n  );\r\n  return { ...rawResponse, tokenBalances: fixedTokenBalances };\r\n}\r\n\r\n/**\r\n * Converts a hex string to a string of a decimal number. Works even with\r\n * numbers so large that they cannot fit into a double without losing precision.\r\n */\r\nfunction hexToDecimal(hex: string): string {\r\n  if (hex.startsWith(\"0x\")) {\r\n    return hexToDecimal(hex.slice(2));\r\n  }\r\n  // https://stackoverflow.com/a/21675915/2695248\r\n  const digits = [0];\r\n  for (let i = 0; i < hex.length; i += 1) {\r\n    let carry = parseInt(hex.charAt(i), 16);\r\n    for (let j = 0; j < digits.length; j += 1) {\r\n      digits[j] = digits[j] * 16 + carry;\r\n      carry = (digits[j] / 10e16) | 0;\r\n      digits[j] %= 10e16;\r\n    }\r\n    while (carry > 0) {\r\n      digits.push(carry % 10e16);\r\n      carry = (carry / 10e16) | 0;\r\n    }\r\n  }\r\n  return digits.reverse().join(\"\");\r\n}\r\n\r\nfunction noop(): void {\r\n  // Nothing.\r\n}\r\n\r\nfunction identity<T>(x: T): T {\r\n  return x;\r\n}\r\n"]}