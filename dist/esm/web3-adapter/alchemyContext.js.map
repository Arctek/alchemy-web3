{"version":3,"file":"alchemyContext.js","sourceRoot":"","sources":["../../../src/web3-adapter/alchemyContext.ts"],"names":[],"mappings":"AAAA,OAAO,eAAe,MAAM,kBAAkB,CAAC;AAE/C,OAAO,EAAE,OAAO,EAAE,MAAM,YAAY,CAAC;AACrC,OAAO,EAAE,cAAc,EAAE,MAAM,mBAAmB,CAAC;AACnD,OAAO,EAAE,mBAAmB,EAAE,MAAM,wBAAwB,CAAC;AAC7D,OAAO,EAAE,uBAAuB,EAAE,MAAM,gBAAgB,CAAC;AACzD,OAAO,EAAE,iBAAiB,EAAE,MAAM,eAAe,CAAC;AAClD,OAAO,EAAE,wBAAwB,EAAE,MAAM,qBAAqB,CAAC;AAO/D,MAAM,UAAU,kBAAkB,CAChC,GAAW,EACX,MAAkB;IAElB,IAAI,cAAc,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE;QAC5B,IAAM,WAAW,GAAG,cAAc,CAAC,GAAG,CAAC,CAAC;QAClC,IAAA,2CAGL,EAHO,4BAAW,EAAE,sCAGpB,CAAC;QACF,IAAM,QAAQ,GAAG,uBAAuB,CAAC,WAAW,CAAC,CAAC;QACtD,OAAO,EAAE,QAAQ,UAAA,EAAE,gBAAgB,kBAAA,EAAE,CAAC;KACvC;SAAM,IAAI,YAAY,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE;QACjC,IAAM,QAAQ,GAAG,YAAY,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,kBAAgB,OAAS,CAAC,CAAC,CAAC,SAAS,CAAC;QAC3E,IAAM,EAAE,GAAG,IAAI,eAAe,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC;QAC9C,IAAM,WAAW,GAAG,mBAAmB,CAAC,EAAE,CAAC,CAAC;QACtC,IAAA,2CAGL,EAHO,4BAAW,EAAE,sCAGpB,CAAC;QACF,IAAM,QAAQ,GAAG,IAAI,wBAAwB,CAAC,EAAE,EAAE,WAAW,CAAC,CAAC;QAC/D,OAAO,EAAE,QAAQ,UAAA,EAAE,gBAAgB,kBAAA,EAAE,CAAC;KACvC;SAAM;QACL,MAAM,IAAI,KAAK,CACb,4EAA0E,GAAK,CAChF,CAAC;KACH;AACH,CAAC;AAED,SAAS,YAAY,CAAC,GAAW;IAC/B,OAAO,GAAG,CAAC,OAAO,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;AAC3C,CAAC","sourcesContent":["import SturdyWebSocket from \"sturdy-websocket\";\r\nimport { FullConfig, Provider } from \"../types\";\r\nimport { VERSION } from \"../version\";\r\nimport { makeHttpSender } from \"./alchemySendHttp\";\r\nimport { makeWebSocketSender } from \"./alchemySendWebSocket\";\r\nimport { makeAlchemyHttpProvider } from \"./httpProvider\";\r\nimport { makePayloadSender } from \"./sendPayload\";\r\nimport { AlchemyWebSocketProvider } from \"./webSocketProvider\";\r\n\r\nexport interface AlchemyContext {\r\n  provider: any;\r\n  setWriteProvider(provider: Provider | null | undefined): void;\r\n}\r\n\r\nexport function makeAlchemyContext(\r\n  url: string,\r\n  config: FullConfig,\r\n): AlchemyContext {\r\n  if (/^https?:\\/\\//.test(url)) {\r\n    const alchemySend = makeHttpSender(url);\r\n    const { sendPayload, setWriteProvider } = makePayloadSender(\r\n      alchemySend,\r\n      config,\r\n    );\r\n    const provider = makeAlchemyHttpProvider(sendPayload);\r\n    return { provider, setWriteProvider };\r\n  } else if (/^wss?:\\/\\//.test(url)) {\r\n    const protocol = isAlchemyUrl(url) ? `alchemy-web3-${VERSION}` : undefined;\r\n    const ws = new SturdyWebSocket(url, protocol);\r\n    const alchemySend = makeWebSocketSender(ws);\r\n    const { sendPayload, setWriteProvider } = makePayloadSender(\r\n      alchemySend,\r\n      config,\r\n    );\r\n    const provider = new AlchemyWebSocketProvider(ws, sendPayload);\r\n    return { provider, setWriteProvider };\r\n  } else {\r\n    throw new Error(\r\n      `Alchemy URL protocol must be one of http, https, ws, or wss. Recieved: ${url}`,\r\n    );\r\n  }\r\n}\r\n\r\nfunction isAlchemyUrl(url: string): boolean {\r\n  return url.indexOf(\"alchemyapi.io\") >= 0;\r\n}\r\n"]}